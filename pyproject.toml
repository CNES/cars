# pyproject.toml
[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "setuptools_scm[toml]>=6.2",
    "meson-python",
    "pybind11"
]
build-backend = "mesonpy"

# enable setuptools_scm version
[tool.setuptools_scm]

# package setup main metadata
[project]
name = "cars"
dynamic = ["version"]
authors = [{ name = "CNES", email = "cars@cnes.fr" }]
description = "A satellite multi view stereo pipeline"
readme = "README.md"
# license = "Apache License 2.0"
# license-files = ["LICENSE"]
keywords = ["cars", "3D", "DEM", "pandora", "photogrammetry"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "Environment :: Console",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
]
requires-python = ">= 3.9"
# cars packages dependencies
dependencies = [
    "numpy>=1.17.0",
    "scipy>=1.7.1,!=1.10.0",
    "matplotlib",
    "affine",
    "rasterio>=1.3.0",
    "dask>=2021.10.0",
    "distributed>=2021.10.0",
    "dask-jobqueue>=0.7.3",
    "json-checker",
    "xarray",
    "tqdm",
    "netCDF4>=1.5.3",
    "Shapely",
    "Fiona",
    "pyproj",
    "utm",
    "pandas",
    "urllib3<2.0,>=1.21.1",
    "laspy[laszip]",
    "tbb==2020.3.254", # Intel optim for numba: KO for 2021 versions
    "numba",
    "pandora[sgm]==1.6.3a1",
    "cars-rasterize==0.2.*",
    "cars-resample==0.1.*",
    "cars-filter==0.1.*",
    "vlsift==0.1.*",
    "shareloc==0.2.5",
    "bulldozer-dtm==1.0.*",
]

[project.urls]
Documentation = "https://cars.readthedocs.io/en/latest/"
Repository = "https://github.com/CNES/cars"

[project.optional-dependencies]
# [dev] mode dependencies: include notebook and doc
dev = [
    "pytest",
    "pytest-cov",
    "pre-commit",
    "isort>=5.8.0",                   # Check imports
    "black>=24.1a1",                  # PEP8 format code
    "flake8>=3.9.1",                  # General linter
    "flake8-pyproject",               # Support configuration in pyproject.toml
    "flake8-comprehensions>=3.4.0",   # Check list/dict/set
    "flake8-bugbear>=21.4.3,<24.0.0", # Add some rules to flake8
    "jupyter_contrib_nbextensions",   # Clean notebooks
    "pylint>=2.8.12,<3.0.0",          # General linter with more rules
    "setuptools_scm",                 # version from git tag
    "virtualenv",
    "configupdater",
    "twine",                          # for pypi upload
    "notebook<7.0.0",                 # for pytest test_notebooks.py
    "bokeh==2.4.3",                   # for pytest test_notebooks.py
    "sphinx",                         # for cars doc
    "sphinx-rtd-theme",               # for cars doc
    "graphviz",                       # for cars doc
    "memory_profiler",
    "memray",
    "dash",
    "plotly",
    "build",                          # for cars build
]

# [docs] mode dependencies
docs = [
    "astroid<3.0.0",
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx_autoapi",
    "graphviz",
    "sphinx_tabs==3.4.0",
    "sphinx-copybutton",
]

# [notebook] mode dependencies
notebook = [
    "notebook",
    "bokeh",
    "rise",
]

# [pandora_mccnn] add heavy mccnn capability for dense matching pandora already install in main requires
pandora_mccnn = [
    "pandora_plugin_mccnn==1.3.0"
]

[tool.black]
# https://github.com/psf/black
line-length = 80
exclude = "(.eggs|.git|.mypy_cache|.nox|.tox|_build|build|dist|venv)"

[tool.isort]
profile = 'black'
line_length = 80
known_third_party = [ "dask" ]

[tool.flake8]
exclude = [".git", "venv", "build", "dist", "tests/test_output"]
extend-ignore = ["E203", "W503"]
max-complexity = 15
max-line-length = 80
select = ["E", "F", "W", "C", "B9", "C4", "B"]

[tool.setuptools.package-data]
cars = ["orchestrator/cluster/dask_config/*.yaml", "conf/geoid/*.grd", "conf/geoid/*.hdr", "applications/dense_matching/loaders/*.json", "applications/dsm_filling/bulldozer_config/*.yaml"]

# Specify no universal wheel supported (only Python3)
[tool.wheel]
universal = false

# cars entry points cli scripts
[project.scripts]
cars = "cars.cars:main"
cars-starter = "cars.starter:cli"
cars-extractroi = "cars.extractroi:main"
cars-dashboard = "cars.orchestrator.tiles_profiler:main"
cars-devibrate = "cars.devibrate:cli"
