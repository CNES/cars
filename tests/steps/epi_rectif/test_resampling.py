#!/usr/bin/env python
# coding: utf8
#
# Copyright (c) 2020 Centre National d'Etudes Spatiales (CNES).
#
# This file is part of CARS
# (see https://github.com/CNES/cars).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
Test module for cars/stereo.py
Important : Uses conftest.py for shared pytest fixtures
"""

# Third party imports
import numpy as np
import pytest
import xarray as xr

# CARS imports
from cars.core import constants as cst
from cars.steps.epi_rectif import resampling

# CARS Tests imports
from ...helpers import absolute_data_path, assert_same_datasets


@pytest.mark.unit_tests
def test_resample_image():
    """
    Test resample image method
    """
    region = [387, 180, 564, 340]

    img = absolute_data_path("input/phr_ventoux/left_image.tif")
    nodata = 0
    grid = absolute_data_path("input/stereo_input/left_epipolar_grid.tif")
    epipolar_size_x = 612
    epipolar_size_y = 612

    test_dataset = resampling.resample_image(
        img,
        grid,
        [epipolar_size_x, epipolar_size_y],
        region=region,
        nodata=nodata,
    )

    # For convenience we use same reference as test_epipolar_rectify_images_1
    ref_dataset = xr.open_dataset(
        absolute_data_path("ref_output/data1_ref_left.nc")
    )

    # We need to remove attributes that are not generated by resample_image
    # method
    ref_dataset.attrs.pop(cst.ROI, None)
    ref_dataset.attrs.pop(cst.EPI_MARGINS, None)
    ref_dataset.attrs.pop(cst.EPI_DISP_MIN, None)
    ref_dataset.attrs.pop(cst.EPI_DISP_MAX, None)
    ref_dataset.attrs["region"] = ref_dataset.attrs[cst.ROI_WITH_MARGINS]
    ref_dataset.attrs.pop(cst.ROI_WITH_MARGINS, None)

    assert_same_datasets(test_dataset, ref_dataset)


@pytest.mark.unit_tests
def test_epipolar_rectify_images_1(
    images_and_grids_conf,
    color1_conf,  # pylint: disable=redefined-outer-name
    epipolar_sizes_conf,  # pylint: disable=redefined-outer-name
    epipolar_origins_spacings_conf,  # pylint: disable=redefined-outer-name
    no_data_conf,
):  # pylint: disable=redefined-outer-name
    """
    Test epipolar_rectify_image on ventoux dataset (epipolar geometry)
    with nodata and color
    """
    configuration = images_and_grids_conf
    configuration["input"].update(color1_conf["input"])
    configuration["input"].update(no_data_conf["input"])
    configuration["preprocessing"]["output"].update(
        epipolar_sizes_conf["preprocessing"]["output"]
    )
    configuration["preprocessing"]["output"].update(
        epipolar_origins_spacings_conf["preprocessing"]["output"]
    )

    region = [420, 200, 530, 320]
    col = np.arange(4)
    margin = xr.Dataset(
        {"left_margin": (["col"], np.array([33, 20, 34, 20]))},
        coords={"col": col},
    )
    margin["right_margin"] = xr.DataArray(
        np.array([33, 20, 34, 20]), dims=["col"]
    )

    margin.attrs[cst.EPI_DISP_MIN] = -13
    margin.attrs[cst.EPI_DISP_MAX] = 14

    # Rectify images
    left, right, clr = resampling.epipolar_rectify_images(
        configuration, region, margin
    )

    print("\nleft dataset: {}".format(left))
    print("right dataset: {}".format(right))
    print("clr dataset: {}".format(clr))

    # Uncomment to update baseline
    # left.to_netcdf(absolute_data_path("ref_output/data1_ref_left.nc"))

    left_ref = xr.open_dataset(
        absolute_data_path("ref_output/data1_ref_left.nc")
    )
    assert_same_datasets(left, left_ref)

    # Uncomment to update baseline
    # right.to_netcdf(absolute_data_path("ref_output/data1_ref_right.nc"))

    right_ref = xr.open_dataset(
        absolute_data_path("ref_output/data1_ref_right.nc")
    )
    assert_same_datasets(right, right_ref)

    # Uncomment to update baseline
    # clr.to_netcdf(absolute_data_path("ref_output/data1_ref_clr.nc"))

    clr_ref = xr.open_dataset(absolute_data_path("ref_output/data1_ref_clr.nc"))
    assert_same_datasets(clr, clr_ref)


@pytest.mark.unit_tests
def test_epipolar_rectify_images_3(
    images_and_grids_conf,  # pylint: disable=redefined-outer-name
    color_pxs_conf,  # pylint: disable=redefined-outer-name
    epipolar_sizes_conf,  # pylint: disable=redefined-outer-name
    epipolar_origins_spacings_conf,  # pylint: disable=redefined-outer-name
    no_data_conf,
):  # pylint: disable=redefined-outer-name
    """
    Test epipolar_rectify_image on ventoux dataset (epipolar geometry)
    with nodata and color as a p+xs fusion
    """
    configuration = images_and_grids_conf
    configuration["input"].update(color_pxs_conf["input"])
    configuration["input"].update(no_data_conf["input"])
    configuration["preprocessing"]["output"].update(
        epipolar_sizes_conf["preprocessing"]["output"]
    )
    configuration["preprocessing"]["output"].update(
        epipolar_origins_spacings_conf["preprocessing"]["output"]
    )

    region = [420, 200, 530, 320]
    col = np.arange(4)
    margin = xr.Dataset(
        {"left_margin": (["col"], np.array([33, 20, 34, 20]))},
        coords={"col": col},
    )
    margin["right_margin"] = xr.DataArray(
        np.array([33, 20, 34, 20]), dims=["col"]
    )

    margin.attrs[cst.EPI_DISP_MIN] = -13
    margin.attrs[cst.EPI_DISP_MAX] = 14

    # Rectify images
    left, right, clr = resampling.epipolar_rectify_images(
        configuration, region, margin
    )

    print("\nleft dataset: {}".format(left))
    print("right dataset: {}".format(right))
    print("clr dataset: {}".format(clr))

    left_ref = xr.open_dataset(
        absolute_data_path("ref_output/data1_ref_left.nc")
    )
    assert_same_datasets(left, left_ref)

    right_ref = xr.open_dataset(
        absolute_data_path("ref_output/data1_ref_right.nc")
    )
    assert_same_datasets(right, right_ref)

    # Uncomment to update baseline
    # clr.to_netcdf(absolute_data_path("ref_output/data3_ref_clr_4bands.nc"))

    clr_ref = xr.open_dataset(
        absolute_data_path("ref_output/data3_ref_clr_4bands.nc")
    )
    assert_same_datasets(clr, clr_ref)
