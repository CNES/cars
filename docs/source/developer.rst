=====================
Developer guide
=====================

CARS is an open source software : don't hesitate to hack it and contribute.

Please see `the GitHub repository`_ for code and more documentation,
and the `official CARS Documentation`_ for user documentation.

Please contact cars AT cnes.fr if needed.

Getting started
===============

First, you need to install `OTB`_ and `VLFeat`_: see :ref:`dependencies` steps.

Obviously, we recommend to use a `virtual environment`_, so that cars and its
dependencies do not interfere with other packages installed on your
machine.

Clone the **cars** repository from GitHub and use **make** command :

.. code-block:: console

    git clone https://github.com/CNES/cars.git
    cd cars
    make install-dev
    source venv/bin/activate
    source venv/bin/env_cars.sh

The Makefile file describes the proposed developer installation method which can be changed at will.
It uses  the following pip installation in a `virtual environment`_

.. code-block:: console

    pip install -e .[dev]

Now, in the virtual environment, ``cars`` is pointing at installed local copy, so
when changes are made, their effect can be easily seen.

.. code-block:: console

    cars -h

Code quality
=============
We use pylint as quality code checking.
Black, isort and flake8 are also installed in developer environment.

Use the following command to check the code with previous tool

.. code-block:: console

    make lint

Use the following command to format the code with isort and black:

.. code-block:: console

    make format

Tests
======

CARS includes a set of tests which can be executed with ``pytest`` to validate an installation or a development.

You can easily launch test in virtualenv using make after developer installation above :

.. code-block:: console

    source venv/bin/activate
    source venv/bin/env_cars.sh
    make test

They launch only the ``unit_tests`` and ``pbs_cluster_tests`` test targets

Before the tests execution, the ``CARS_TEST_TEMPORARY_DIR`` can be defined to indicate where to write the temporary data bound to the test procedure (if the variable is not set, cars will use ``/tmp``).

Several kinds of tests are identified by specific pytest markers:
- the unit tests defined by the ``unit_tests`` marker
- the PBS cluster tests defined by the ``pbs_cluster_tests`` marker
- the Jupyter notebooks test defined by the ``notebook_tests`` marker

Advanced testing
----------------

To execute the tests manually, use ``pytest`` at the CARS projects's root (after initializing the environment):

.. code-block:: bash

    $ cd cars/
    $ python -m pytest

To run only the unit tests:

.. code-block:: bash

    $ cd cars/
    $ pytest -m unit_tests

To run only the PBS cluster tests:

.. code-block:: bash

    $ cd cars/
    $ pytest -m pbs_cluster_tests

To run only the Jupyter notebooks tests:

.. code-block:: bash

    $ cd cars/
    $ pytest -m notebook_tests

It is possible to obtain the code coverage level of the tests by installing the ``pytest-cov`` module and use the ``--cov`` option.

.. code-block:: bash

    $ cd cars/
    $ python -m pytest --cov=cars

It is also possible to execute only a specific part of the test, either by indicating the test file to run:

.. code-block:: bash

    $ cd cars/
    $ python -m pytest tests/test_tiling.py

Or by using the ``-k`` option which will execute the tests which names contain the option's value:

.. code-block:: bash

    $ cd cars/
    $ python -m pytest -k end2end

By default, ``pytest`` does not display the traces generated by the tests but only the tests' status (passed or failed). To get all traces, the following options have to be added to the command line (which can be combined with the previous options):

.. code-block:: bash

    $ cd cars/
    $ python -m pytest -s -o log_cli=true -o log_cli_level=INFO


.. _`OTB`: https://www.orfeo-toolbox.org/CookBook/Installation.html
.. _`VLFeat`: https://github.com/vlfeat/vlfeat
.. _`the GitHub repository`: https://github.com/CNES/cars
.. _`official CARS Documentation`: https://cars.readthedocs.io
.. _`virtual environment`: https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/
