.. _advanced_parameters:

Advanced parameters
===================

Here are the advanced parameters. This key is optional and can be useful if you want to use CARS more as a developer.

.. list-table:: Configuration
    :widths: 19 19 19 19 19
    :header-rows: 1

    * - Name
      - Description
      - Type
      - Default value
      - Required
    * - save_intermediate_data
      - Save intermediate data for all applications, at any or all resolutions
      - bool or dict[bool]
      - False
      - No
    * - keep_low_res_dir
      - Whether to save the output of all resolution runs or not 
      - bool
      - true
      - No
    * - use_epipolar_a_priori
      - Active epipolar a priori
      - bool
      - False
      - Yes
    * - epipolar_a_priori
      - Provide epipolar a priori information (see section below)
      - dict
      -
      - No
    * - terrain_a_priori
      - Provide terrain a priori information (see section below)
      - dict
      -
      - No
    * - epipolar_resolutions
      - The resolutions at which the Unit Pipeline will be ran for each pair
      - list[int], int
      - [16, 4, 1]
      - No
    * - debug_with_roi
      - Use input ROI with the tiling of the entire image (see Inputs section)
      - bool
      - False
      - No
    * - merging
      - Merge point clouds before rasterization (soon to be deprecated)
      - bool
      - False
      - No
    * - dsm_merging_tile_size
      - Tile size to use in dsms merging
      - int
      - 4000
      - No
    * - ground_truth_dsm
      - Datas to be reprojected from the application ground_truth_reprojection
      - dict
      -
      - No
    * - phasing
      - Phase to use for DSM {"point" : (x,y) , "epsg": epsg}
      - dict
      -
      - No
    * - geometry_plugin
      - Name of the geometry plugin to use and optional parameters
      - str or dict
      - "SharelocGeometry"
      - No
    * - pipeline
      - Name of the pipeline to use
      - str
      - "default"
      - No
    * - land_cover_map
      - A global classification map used to choose the optimal configuration for dense matching
      - str
      - "global_land_cover_map.tif"
      - No
    * - classification_to_configuration_mapping
      - A JSON file that maps each class of the global classification map to a corresponding Pandora configuration
      - str
      - "config_mapping.json"
      - No


.. tabs::

    .. tab:: Save intermediate data

        The `save_intermediate_data` flag can be used to activate and deactivate the saving of the possible output of applications.

        It is set in the `advanced` category and can be overloaded in each application separately. It defaults to false, meaning that no intermediate product is saved. 
        Intermediate data are saved in the `dump_dir` folder found in CARS output directory, with a subfolder corresponding to each application.

        For example, setting `save_intermediate_data` to `true` in `advanced` and to `false` in `applications/point_cloud_rasterization` will activate product saving in all applications except `point_cloud_rasterization`.
        Conversely, setting it to `false` in `advanced` and to `true` in `applications/point_cloud_rasterization` will only save rasterization outputs.

        Intermediate data refers to all files that are not part of an output product. Files that compose an output product will not be found in the application dump directory.
        For example if `dsm` is requested as output product, the `dsm.tif` files and all activated dsm auxiliary files will not be found in `rasterization` dump directory.
        This directory will still contain the files generated by the `rasterization` application that are not part of the `dsm` product.

        `save_intermediate_data` can be either a dict or a bool.
        A bool will enable `save_intermediate_data` for all resolutions.
        A dict will enable it for any resolution where it's marked as true, and disable it for any resolution where it's marked as false (or isn't in the dict).

        The following example enables `save_intermediate_data` for all applications at all resolutions : 

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_save_intermediate_data_1

        This in turn will produce the following folder structure :

        .. code-block::

            cars_output_folder/
                dsm/
                dump_dir/
                intermediate_res/
                    out_res16/
                        dsm/
                        dump_dir/
                    out_res4/
                        dsm/
                        dump_dir/
        
        The following example enables `save_intermediate_data` for all applications at resolution 16, while keeping it disabled for both resolution 4 and resolution 1 :

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_save_intermediate_data_2


    .. tab:: Keep low res dir

        The `keep_low_res_dir` parameter flag can be used to specify that you would like the intermediate DSMs and DEMs to be saved in their respective directory.

        By default, since `keep_low_res_dir` is true, you will find the intermediate DSMs and DEMs in `intermediate_res/out_res{resolution_value}/dsm`.
        If `save_intermediate_data` was enabled for an application of an intermediate resolution, those results will be found in `intermediate_res/out_res{resolution_value}/dump_dir`.

        The following example disables the saving of the outputs of all intermediate resolutions:

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_keep_low_res_dir
        
    .. tab:: Epipolar a priori

        The CARS pipeline produces a ``used_conf.json`` in the `outdir` that contains the `epipolar_a_priori`
        information for each sensor image pairs. If you wish to re-run CARS, this time by skipping the
        sparse matching, you can use the ``used_conf.json`` as the new input configuration, with
        its `use_epipolar_a_priori` parameter set to `True`.

        For each sensor images, the epipolar a priori are filled as following:

        +-----------------------+-------------------------------------------------------------+--------+----------------+----------------------------------+
        | Name                  | Description                                                 | Type   | Default value  | Required                         |
        +=======================+=============================================================+========+================+==================================+
        | *grid_correction*     | The grid correction coefficients                            | list   |                | if use_epipolar_a_priori is True |
        +-----------------------+-------------------------------------------------------------+--------+----------------+----------------------------------+
        | *disparity_range*     | The disparity range [disp_min, disp_max]                    | list   |                | if use_epipolar_a_priori is True |
        +-----------------------+-------------------------------------------------------------+--------+----------------+----------------------------------+

        .. note::

            The grid correction coefficients are based on bilinear model with 6 parameters [x1,x2,x3,y1,y2,y3].
            The None value produces no grid correction (equivalent to parameters [0,0,0,0,0,0]).


    .. tab:: Terrain a priori

        The `terrain_a_priori` is used at the same time that `epipolar_a_priori`.
        If `use_epipolar_a_priori` is activated, `epipolar_a_priori` and `terrain_a_priori` must be provided.
        The terrain_a_priori data dict is produced during low or full resolution dsm pipeline.

        The terrain a priori is initially populated with DEM information.

        +----------------+-------------------------------------------------------------+--------+----------------+----------------------------------+
        | Name           | Description                                                 | Type   | Default value  | Required                         |
        +================+=============================================================+========+================+==================================+
        | *dem_median*   | DEM generated with median function                          | str    |                | if use_epipolar_a_priori is True |
        +----------------+-------------------------------------------------------------+--------+----------------+----------------------------------+
        | *dem_min*      | DEM generated with min function                             | str    |                | if use_epipolar_a_priori is True |
        +----------------+-------------------------------------------------------------+--------+----------------+----------------------------------+
        | *dem_max*      | DEM generated with max function                             | str    |                | if use_epipolar_a_priori is True |
        +----------------+-------------------------------------------------------------+--------+----------------+----------------------------------+

    .. tab:: Epipolar resolutions

        The `epipolar_resolutions` parameter is used to specify the number and resolution of Unit Pipeline runs.
        Resolutions are set from the lowest to the highest, with 1 being the highest possible.
        A resolution of n means that one pixel from the downsampled image will be calculated using nÂ² pixels from the full-res image.
        
        For example, epipolar_resolutions = [16, 4, 2, 1] with an image of 2048x3072 and a pixel size of 1 m will run the Unit Pipeline four times :

        - First (16), with a size of 128x192 and a pixel size of 16 m
        - Then (4), with a resolution of 512x768 and a pixel size of 4 m
        - Then (2), with a resolution of 1024x1536 and a pixel size of 2 m
        - Then (1), with a resolution of 2048x3072 and the original pixel size of 1 m

        Each run will provide an apriori on the height of the terrain at each position for the next run, resulting in a low computation time.


    .. tab:: Ground truth DSM

        To activate the ground truth reprojection application, it is necessary to specify the required inputs in the advanced settings.
        For this, a dictionary named `ground_truth_dsm` must be added, containing the keys presented in the following table.
        By default, the used dsm is considered on ellipsoid. If not, fill the `geoid` parameter.

        +---------------------------------+------------------------------------------------------------+--------------------+------------------------------+-------------------------------------------------------+----------+
        | Name                            | Description                                                | Type               | Available value              | Default value                                         | Required |
        +=================================+============================================================+====================+==============================+=======================================================+==========+
        | dsm                             | Path to ground truth dsm (Lidar for example)               | string             |                              |                                                       | Yes      |
        +---------------------------------+------------------------------------------------------------+--------------------+------------------------------+-------------------------------------------------------+----------+
        | geoid                           | DSM geoid.                                                 | bool or string     |                              |  False                                                | No       |
        +---------------------------------+------------------------------------------------------------+--------------------+------------------------------+-------------------------------------------------------+----------+
        | auxiliary_data                  | The lidar auxiliaries data                                 | dict               |                              |  None                                                 | No       |
        +---------------------------------+------------------------------------------------------------+--------------------+------------------------------+-------------------------------------------------------+----------+
        | auxiliary_data_interpolation    | The lidar auxiliaries data interpolator                    | dict               |                              |  None (nearest if auxiliary_data is not None)         | No       |
        +---------------------------------+------------------------------------------------------------+--------------------+------------------------------+-------------------------------------------------------+----------+

        .. note::

            The parameter `geoid` refers to the vertical reference of the ground truth DSM. It can be set as a string to provide the path to a geoid file on disk, or as a boolean: if set to True CARS default geoid is used, if set to False no vertical offset is applied (ellipsoid reference).

        Example:

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_ground_truth_dsm

    .. tab:: Phasing

        Phase can be added to make sure multiple DSMs can be merged in "dsm -> dsm" pipeline.
        "point" and "epsg" of point must be specified

        +-------------------+--------------------------+----------------+-------------------------+---------------------------------------+----------+
        | Name              | Description              | Type           | Default value           | Available values                      | Required |
        +===================+==========================+================+=========================+=======================================+==========+
        | *point*           | Point to phase on        | tuple          | None                    |                                       | False    |
        +-------------------+--------------------------+----------------+-------------------------+---------------------------------------+----------+
        | *epsg*            | Epsg of point            | int            | None                    |                                       | False    |
        +-------------------+--------------------------+----------------+-------------------------+---------------------------------------+----------+

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_phasing

    .. tab:: Geometry plugin

        This section describes configuration of the geometry plugins for CARS, please refer to :ref:`plugins` section for details on plugins installation.

        +-------------------+-----------------------+----------------+-------------------------+---------------------------------------+----------+
        | Name              | Description           | Type           | Default value           | Available values                      | Required |
        +===================+=======================+================+=========================+=======================================+==========+
        | *geometry_plugin* | The plugin to use     | str or dict    | "SharelocGeometry"      | "SharelocGeometry"                    | False    |
        +-------------------+-----------------------+----------------+-------------------------+---------------------------------------+----------+

        **geometry_plugin** allow user to specify other parameters, through a dictionary:

        +-----------------------------+------------------------------------------------------------------------------------+----------------+-------------------------+---------------------------------------+----------+
        | Name                        | Description                                                                        | Type           | Default value           | Available values                      | Required |
        +=============================+====================================================================================+================+=========================+=======================================+==========+
        | *plugin_name*               | The plugin name to use                                                             | str            | "SharelocGeometry"      | "SharelocGeometry"                    | False    |
        +-----------------------------+------------------------------------------------------------------------------------+----------------+-------------------------+---------------------------------------+----------+
        | *interpolator*              | Interpolator to use                                                                | str            | "cubic"                 | "cubic" , "linear"                    | False    |
        +-----------------------------+------------------------------------------------------------------------------------+----------------+-------------------------+---------------------------------------+----------+
        | *dem_roi_margin*            | Additional margin for DEM : [factor_of_terrain_bounds, constant_margin_in_degrees] | list           | [0.25, 0.02]            |                                       | False    |
        +-----------------------------+------------------------------------------------------------------------------------+----------------+-------------------------+---------------------------------------+----------+


        To use Shareloc geometry library, CARS input configuration should be defined as :

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_geometry_plugin_1

        **geometry_plugin** specify the plugin to use, but other configuration parameters can be specified :

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_geometry_plugin_2

        The particularities in the configuration file are:

        * **geomodel.model_type**: Depending on the nature of the geometric models indicated above, this field as to be defined as :term:`RPC` or `GRID`. By default, "RPC".
        * **initial_elevation**: Field contains the path to the **file** corresponding the srtm tiles covering the production (and **not** a directory !!)
        * **geometry_plugin**: Parameter configured to "SharelocGeometry" to use Shareloc plugin.

        Parameter can also be defined as a string *path* instead of a dictionary in the configuration. In this case, geomodel parameter will
        be changed to a dictionary before launching the pipeline. The dictionary will be :

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_geometry_plugin_3

        .. note::

            Be aware that geometric models must therefore be opened by Shareloc directly in this case, and supported sensors may evolve.

    .. tab:: Pipeline configurations
        The ``pipeline`` key is optional and allows users to choose the pipeline they would like to run. By default, CARS has a single pipeline: `default`.
        This pipeline is modular and can be adapted to your needs. This sections provides examples of specific configurations.

        Installed plugins may provide additional pipelines. The inputs and outputs are specific to each pipeline. This section describes the pipeline available in CARS.

        +----------------+-----------------------+--------+---------------+------------------+----------+
        | Name           | Description           | Type   | Default value | Available values | Required |
        +================+=======================+========+===============+==================+==========+
        | *pipeline*     | The pipeline to use   | str    | "default"     | "default"        | False    |
        +----------------+-----------------------+--------+---------------+------------------+----------+

        .. include-cars-config:: ../../example_configs/how_to_use_CARS/advanced_configuration/advanced_pipeline